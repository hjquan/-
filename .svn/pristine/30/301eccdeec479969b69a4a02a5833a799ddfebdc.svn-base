<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,width=device-width,initial-scale=1.0" />
    <meta name="format-detection" content="telephone=no,email=no,date=no,address=no">
    <title></title>

    <link rel="stylesheet" href="../../../commonUi/aui/css/aui.css">
    <link rel="stylesheet" href="../../../css/calendar.css">
    <link rel="stylesheet" href="../../../commonUi/H5TimeSelector/libs/iosselect.css">
    <link rel="stylesheet" type="text/css" href="../../../css/addlog.css" />
    <link rel="stylesheet" href="../../../css/voice.css">
    <style>
        html,body{height:100%}
        .container {
            background-color: rgba(245, 245, 245, 1);

        }

        .imgIcon {
            display: inline-block;
            width: 30px;
            height: 30px;
            background-image: url('../../../image/bsise.png');
            background-size: cover;
        }

        .requid {
            color: #EC4031;
        }

        .textarea {
            height: 145px;
            line-height: 25px;
            font-size: 15px;
            padding: 10px;
            font-weight: 400;
            color: rgba(199, 199, 204, 1);
        }

        .textarea textarea {
            height: 95px;
            overflow-y: auto;
        }

        .list_title {
            font-size: 15px;
            font-weight: 400;
            color: rgba(51, 51, 51, 1);
            height: 30px;
            line-height: 30px;
            background-color: #fff;
        }

        .aui-list-item {
            background-color: #fff;
            position: relative;
        }

        .clickShow {
            font-size: 13px;
            font-family: PingFangSC-Semibold, PingFang SC;
            font-weight: 600;
            color: rgba(5, 143, 253, 1);
            line-height: 13px;
            text-align: center;
            margin-top: 20px;
        }

        .mian_item .inputCls {
            margin-left: 35px;
            height: 35px;
        }

        .mt_10 {
            margin-top: 10px;
        }

        .mb_25 {
            padding-bottom: 25px;
        }

        .color_f5 {
            background-color: #f5f5f5;
        }

        .i_wd {
            color: #8F929A;
        }

        .active {
            background-color: rgba(5, 143, 253, 1) !important;
        }
        .mian_item .inputPosition{padding-right: 10px}
        .last-txt{
            font-size:11px;
            font-family:PingFangSC-Regular,PingFang SC;
            font-weight:400;
            color:rgba(185,185,185,1);
            /*height:30px;
            line-height: 30px;*/
            padding: 8px 10px;
        }
        .btnActive{
            background-color: rgba(5, 143, 253, 1) !important;
        }
    </style>
</head>

<body>
    <div class="container" id="app">
        <div class="main_box " v-cloak>
          <div class="imgUpdate border_bottom_after"  style="padding:10px 15px;" v-cloak>
              <div class="imgItem" v-for="(item,index) in imgSrc" tapmode="hover" v-cloak>
                  <i class="aui-iconfont aui-icon-close del_close" v-if="isCloseBtn" @click=removeImage(index) tapmode="hover"></i>
                  <img :src="item" alt="" tapmode @click="imgSee(imgSrc,index)">
              </div>
              <div @click="uploadHeadPic()" tapmode v-if="imgSrc.length < 3">+</div>
          </div>
            <ul>

                <li class="mian_item border_bottom_after" tapmode  @click="openProblemlocation()">
                    <p>问题部位<span class="requid">*</span></p>
                    <p ><span v-text="areaName"></span> <i class="aui-iconfont aui-icon-right"></i></p>
                </li>
                <li class="mian_item border_bottom_after" tapmode @click="openproblemtype()">
                    <p>问题类型<span class="requid">*</span></p>
                    <p  ><span v-text="questionDetails"></span> <i class="aui-iconfont aui-icon-right"></i></p>
                </li>
                <li class="mian_item border_bottom_after" tapmode>
                    <p>问题描述<span class="requid"></span></p>
                    <!-- <div class="aui-list-item-input">
                        <textarea placeholder="请输入" id="" v-model="constructionContents"></textarea>
                    </div> -->
                    <div>
                        <input type="text" v-model.trim="content" placeholder="请输入" class="inputPosition">
                    </div>
                </li>
                <li class="mian_item border_bottom_after" tapmode>
                    <p>整改措施<span class="requid"></span></p>
                    <div>
                        <input type="text" v-model="zgMeasures" placeholder="请输入" class="inputPosition">
                    </div>
                </li>

            </ul>
            <ul class="mt_10">
              <li class="mian_item border_bottom_after" tapmode @click="openliableFn()">
                  <p>责任人<span class="requid">*</span></p>
                  <p ><span v-text="personliableName"></span> <i class="aui-iconfont aui-icon-right"></i></p>
              </li>
              <li class="mian_item border_bottom_after" @click="openlaborFn()">
                  <p>劳务单位<span class="requid">*</span></p>
                  <p ><span v-text="laborTeamName"></span> <i class="aui-iconfont aui-icon-right"></i></p>
              </li>
              <li class="mian_item border_bottom_after" tapmode @click="clicklogTimeFn()">
                  <p>整改期限<span class="requid">*</span></p>
                  <p tapmode ><span v-text="deadline"></span> <i class="aui-iconfont aui-icon-right"></i></p>
              </li>
            </ul>
            <ul  class="mt_10">
              <li class="mian_item border_bottom_after">
                  <p v-text="isFlow ? '需要审批':'不需要审批'">需要审批</p>
                  <p><input type="checkbox" v-model="isFlow" class="aui-switch"></p>
              </li>
              <li class="last-txt"
                  v-text="isFlow?'问题在线下处理完毕后，需要您再次进行确认':'流程步骤：发起-整改-复查，步骤处理人可通过 项目设置/流程管理 进行配置'">

              </li>
            </ul>



            <div class="" style="background-color:#f5f5f5;">
                <div style="margin-top:10px;" class="cancelBtn" :class="{'btnActive':isSubmitActive}" tapmode="hover" @click="submitFn()">发布</div>
            </div>
        </div>

    </div>

    <script src="../../../script/api.js"></script>
    <script src="../../../script/sha1.js"></script>
    <script src="../../../script/common.js"></script>
    <script src="../../../script/vue.js"></script>
    <script src="../../../script/lunarcalendar.js"></script>
    <script src="../../../script/permission.js"></script>
    <script type="text/javascript" src="../../../commonUi/H5TimeSelector/libs/iosselect.js"></script>
    <script type="text/javascript" src="../../../commonUi/H5TimeSelector/timeselector.js"></script>
    <script src="../../../script/commonJS/voiceinput.js"></script>
    <script>
        // var vm;
        apiready = function() {
            //自定义键盘按钮
            // var keyboardView = api.require('keyboardView');
            var UIAlbumBrowser = api.require('UIAlbumBrowser');

            //保存草稿
            api.addEventListener({
                name: 'savesecurity_add_draft'
            }, function(ret, err) {
                if (ret) {
                    vm.save_draft()
                } else {
                    alert(JSON.stringify(err));
                }
            });

            //删除草稿
            api.addEventListener({
                name: 'delsecurity_add_draft'
            }, function(ret, err){
                if( ret ){
                    vm.del_draft()
                }else{
                     alert( JSON.stringify( err ) );
                }
            });





            //监听劳务单位事件
            api.addEventListener({
                name: 'personlabor_event'
            }, function(ret, err){
                if( ret ){
                    vm.personlaborbox = ret.value.personlaborinfo
                    var txt = $api.strToJson(ret.value.personlaborinfo);

                    var name_join = '';
                    var id_join = '';

                    txt.forEach(function(item){
                        name_join += (item.laborName+',');
                        id_join += (item.laborId+',')
                    })
                    vm.laborTeamName = name_join.substr(0,name_join.length-1);
                    vm.laborTeamId = id_join.substr(0,id_join.length-1);
                }else{
                     alert( JSON.stringify( err ) );
                }
            });

            //监听责任人事件
            api.addEventListener({
                name: 'personliable_event'
            }, function(ret, err){
                if( ret ){
                    vm.personliablebox = ret.value.personliableinfo;
                    var txt = $api.strToJson(ret.value.personliableinfo);

                    var name_join = '';
                    var id_join = '';

                    txt.forEach(function(item){
                        name_join += (item.name+',');
                        id_join += (item.userId+',')
                    })
                    vm.personliableName = name_join.substr(0,name_join.length-1);
                    vm.personliableId = id_join.substr(0,id_join.length-1);
                }else{
                     alert( JSON.stringify( err ) );
                }
            });
            //监听选择问题部位
            api.addEventListener({
                name: 'problemlocation_event'
            }, function(ret, err){
                if( ret ){
                    vm.problemlocationbox = ret.value.problemlocationInfo;
                    var txt = $api.strToJson(ret.value.problemlocationInfo);
                    vm.areaId = txt.area_id;
                    vm.areaName =ret.value.securityparent_name + '_' + txt.area_name
                }else{
                     alert( JSON.stringify( err ) );
                }
            });


            //监听选择问题类型
            api.addEventListener({
                name: 'add_security_type_event'
            }, function(ret, err){
                if( ret ){
                    var txt = $api.strToJson(ret.value.problemtypeInfo);
                    vm.questionType = txt.dictionaries_id;
                    vm.questionDetails = txt.name;
                }else{
                     alert( JSON.stringify( err ) );
                }
            });

            //监听关闭当前页面事件
            api.addEventListener({
                name: 'closeCurrent_add'
            }, function(ret, err){
                if( ret ){
                    vm.currentcloseWin();
                }else{
                     alert( JSON.stringify( err ) );
                }
            });


            var vm = new Vue({
                el: '#app',
                data: {
                    'isDeldart':false,//判断是否删除草稿
                    "isCloseBtn":true,//是否显示删除图片icon
                    "imgSrc":[],
                    "personliablebox":'',//选中的责任人集合用于匹配是否选中
                    "personlaborbox":'',//选中的劳务队集合用于匹配是否选中
                    "problemlocationbox":'',//选中的劳务队集合用于匹配是否选中
                    "serverImg":'',//服务器返回图片地址


                    "areaId": "",//区域id
                    "areaName": "",//区域名称
                    "questionType": "",//问题类型(更改:只需要传第一级问题类型id)
                    "personliableId": "",//责任人ID
                    "personliableName": "",//责任人名称

                    "laborTeamId": "",//劳务队ID
                    "laborTeamName": "",//劳务队名称


                    "deadline": '',//整改到期日期
                    "createUserId":'',//创建人ID
                    "createUserName":'',//创建人名称
                    "projectId":'',//项目ID
                    "lableUrl": "",//标注图片地址(更改：该字段已清除)

                    "srcImgUrl": "",//原图片地址（多张逗号分隔）
                    "compressImgUrl": "",//压缩图片地址（多张逗号分隔）
                    "voiceUrl": "",//语音文件地址
                    "content":'',//问题描述
                    "questionDetails": "",//问题类型名称(更改：只需要传第一级)
                    "voiceLong": "",//语音时长
                    "zgMeasures":'',//整改措施
                    "zgVoice": "",//整改语音文件路径
                    "zgVoiceLong": "",//整改措施语音时长
                    "isFlow": 1//是否进入流程(更改的)（1进入流程 0不进入）
                },
                watch: {

                },
                computed: {

                    // 控制提交按钮状态
                    isSubmitActive: function() {
                        if (!this.areaName || !this.questionDetails || !this.personliableName || !this.laborTeamName || !this.deadline || !this.imgSrc.length) {
                            return false
                        } else {
                            return true
                        }
                    }

                },
                mounted: function() {


                },
                created: function() {
                    this.init();
                    var d= new Date();
                    var m = (d.getMonth() + 1)+'',day = d.getDate()+'';
                    var time = d.getFullYear() + '-' + (m.length >1 ? m : ('0'+m)) + '-' + (day.length>1 ? day :('0'+day) );
                    this.deadline = time;
                    this.createUserId=$api.getStorage('userId');//创建人ID
                    this.createUserName= $api.getStorage('enterLoginInfo').name;//创建人名称
                    this.projectId= $api.getStorage('enterpriseId');//项目ID
                },
                methods: {
                    // 初始化数据
                    init:function(){
                        api.getPrefs({
                            key: 'security_add_draft'
                        }, function(ret, err){
                            if( ret ){
                                if(ret.value && api.pageParam.addDraft_comfig){
                                    var data = $api.strToJson(ret.value);
                                    vm.imgSrc = data.imgSrc;
                                    vm.areaId = data.areaId;
                                    vm.areaName = data.areaName;
                                    vm.questionType = data.questionType;
                                    vm.personliableId = data.personliableId;
                                    vm.personliableName = data.personliableName;
                                    vm.laborTeamId = data.laborTeamId;
                                    vm.laborTeamName = data.laborTeamName;
                                    vm.deadline = data.deadline;
                                    vm.content = data.content;
                                    vm.questionDetails = data.questionDetails;
                                    vm.zgMeasures = data.zgMeasures;
                                    vm.isFlow = data.isFlow == '0' ? false :true;
                                    vm.isDeldart = true;
                                }else{
                                    vm.imgSrc = [];
                                    vm.areaId = '';
                                    vm.areaName = ''
                                    vm.questionType = '';
                                    vm.personliableId = '';
                                    vm.personliableName ='';
                                    vm.laborTeamId = '';
                                    vm.laborTeamName = '';
                                    // vm.deadline = '';
                                    vm.content = '';
                                    vm.questionDetails = '';
                                    vm.zgMeasures = '';
                                    // vm.isFlow = data.isFlow;
                                }

                            }else{
                                 alert( JSON.stringify( err ) );
                            }
                        });

                    },
                    //删除草稿
                    del_draft:function(){
                        api.removePrefs({
                            key: 'security_add_draft'
                        });
                        api.getPrefs({
                            key: 'security_add_draft'
                        }, function(ret, err){

                            if( ret ){
                                if(!ret.value){
                                    api.toast({
                                        msg: '草稿删除成功',
                                        duration: 2000,
                                        location: 'bottom'
                                    });
                                    //触发首页刷新
                                    api.sendEvent({
                                        name: 'refsh_security_list_event',
                                        extra: {
                                        }
                                    });
                                    setTimeout(function(){api.closeWin();},500)//保存成功后关闭当前页
                                }
                            }else{
                                 alert( JSON.stringify( err ) );
                            }
                        });

                    },
                    //保存草稿
                    save_draft:function(){
                        var isFlag = this.imgSrc.length || this.content || this.zgMeasures || this.areaName || this.questionDetails || this.personliableName || this.laborTeamName;
                        if(!isFlag){
                            api.toast({
                                msg: ' 保存草稿不能为空',
                                duration: 2000,
                                location: 'bottom'
                            });
                            api.sendEvent({
                                name: 'securitytoggle_btn_event',
                                extra: {

                                }
                            });

                            return false

                        }else{
                            console.log('save');
                            var params = {
                                "imgSrc":vm.imgSrc,

                                "areaId": vm.areaId,//区域id
                                "areaName": vm.areaName,//区域名称
                                "questionType": vm.questionType,//问题类型(更改:只需要传第一级问题类型id)
                                "personliableId": vm.personliableId,//责任人ID
                                "personliableName": vm.personliableName,//责任人名称

                                "laborTeamId": vm.laborTeamId,//劳务队ID
                                "laborTeamName": vm.laborTeamName,//劳务队名称


                                "deadline": vm.deadline,//整改到期日期
                                "lableUrl": "",//标注图片地址(更改：该字段已清除)

                                "srcImgUrl": vm.srcImgUrl,//原图片地址（多张逗号分隔）
                                "compressImgUrl": vm.compressImgUrl,//压缩图片地址（多张逗号分隔）
                                "voiceUrl": vm.voiceUrl,//语音文件地址
                                "content":vm.content,//问题描述
                                "questionDetails": vm.questionDetails,//问题类型名称(更改：只需要传第一级)
                                "voiceLong": vm.voiceLong,//语音时长
                                "zgMeasures":vm.zgMeasures,//整改措施
                                "zgVoice": vm.zgVoice,//整改语音文件路径
                                "zgVoiceLong": vm.zgVoiceLong,//整改措施语音时长
                                "isFlow": vm.isFlow == 1 ? '1' :'0'//是否进入流程(更改的)（1进入流程 0不进入）
                            }
                            api.setPrefs({
                                key: 'security_add_draft',
                                value: $api.jsonToStr(params)
                            });
                            api.getPrefs({
                                key: 'security_add_draft'
                            }, function(ret, err){

                                if( ret ){
                                    if(ret.value){
                                        api.toast({
                                            msg: '草稿保存成功',
                                            duration: 2000,
                                            location: 'bottom'
                                        });

                                    }
                                    //触发首页刷新
                                    api.sendEvent({
                                        name: 'refsh_security_list_event',
                                        extra: {
                                        }
                                    });
                                    setTimeout(function(){api.closeWin();},500)//保存成功后关闭当前页

                                }else{
                                     alert( JSON.stringify( err ) );
                                }
                            });

                        }


                    },

                    //打开责任人
                    openliableFn:function(){
                        if(!this.areaName){
                            api.toast({
                                msg: '请先选择问题部位',
                                duration: 2000,
                                location: 'bottom'
                            });
                            return false

                        };
                        api.openWin({
                            name: 'securitypersonliable',
                            url: './securitypersonliable.html',
                            pageParam: {
                                // name: 'test'
                                "defalutcheck":vm.personliablebox
                            }
                        });
                    },
                    //打开劳务win
                    openlaborFn:function(){
                        if(!this.areaName){
                            api.toast({
                                msg: '请先选择问题部位',
                                duration: 2000,
                                location: 'bottom'
                            });
                            return false
                        };
                        api.openWin({
                            name: 'securitypersonlabor',
                            url: './securitypersonlabor.html',
                            pageParam: {
                                "defalutcheck":vm.personlaborbox
                            }
                        });
                    },
                    //打开问题类型
                    openproblemtype:function(){
                        api.openWin({
                            name: 'securityproblemtype',
                            url: './securityproblemtype.html',
                            pageParam: {
                                "defaultproblemTypeId": vm.questionType
                            }
                        });


                    },
                    //打开问题部位win
                    openProblemlocation:function(){
                        api.openWin({
                            name: 'securityproblemlocation',
                            url: './securityproblemlocation.html',
                            pageParam: {
                                "defalutproblemlocationId":vm.problemlocationbox
                            }
                        });

                    },



                    //获取日期
                    clicklogTimeFn: function() {
                        var timeDate = new Date(vm.logTime)
                        timeSelector.fnOpenSelector({
                            title: ' ', //选填 |  '时间选择'    |  String         |  选择器标题文案
                            sureText: '完成', //选填 |    '完成'      |  String        |   确定按钮文案
                            isShowUnit: true, //选填 |     true      |  Boolean        |  是否显示中文单位名称
                            itemShowCount: 5, //选填 |      5        |  Number         |  显示的行数
                            itemHeight: 55, //选填 |      55       |  Number         |  行高度（单位px）
                            date: timeDate.getFullYear() + '/' + (timeDate.getMonth() + 1) + '/' + timeDate.getDate()   //选填 |   new Date    |  Date/String     |  默认选中的时间
                        }, function(ret) {
                            if(!ret){return }
                            var date = new Date(ret.date)
                            var selectDate = new Date(date.getFullYear() + '-' + (date.getMonth()+1)+ '-' + date.getDate()).getTime();//选择的时间年月日
                            var currenDateTime = new Date();//当前时间毫秒数
                            var curenDate = new Date(currenDateTime.getFullYear() + '-' + (currenDateTime.getMonth()+1) + '-' + currenDateTime.getDate()).getTime();//当前时间年月日

                            if(selectDate < curenDate){
                                api.toast({
                                    msg: '不能选择小于当前日期',
                                    duration: 2000,
                                    location: 'bottom'
                                });
                                return false;

                            }
                            var m = (date.getMonth() + 1)+'',day = date.getDate()+'';
                            var time = date.getFullYear() + '-' + (m.length >1 ? m : ('0'+m)) + '-' + (day.length>1 ? day :('0'+day) );
                            vm.deadline= time;
                        })
                    },
                    //关闭是否保存草稿
                    currentcloseWin: function() {
                        var _this = this;
                        var isFlag = this.imgSrc.length || this.content || this.zgMeasures || this.areaName || this.questionDetails || this.personliableName || this.laborTeamName;

                        var confirmFn = function (){
                            api.confirm({
                                // title: 'testtitle',
                                msg: '是否保存已更改的内容?',
                                buttons: ['确定', '取消']
                            }, function(ret, err){
                                if( ret ){

                                    var index = ret.buttonIndex;
                                    if(index == 1){
                                        vm.save_draft();
                                        api.sendEvent({
                                            name: 'refsh_security_list_event',
                                            extra: {
                                            }
                                        });
                                        setTimeout(function(){
                                            api.closeWin()
                                        },200)
                                    }else{
                                        // api.sendEvent({
                                        //     name: 'refsh_security_list_event',
                                        //     extra: {
                                        //     }
                                        // });
                                        setTimeout(function(){
                                            api.closeWin()
                                        },200)
                                    }
                                }else{
                                     alert( JSON.stringify( err ) );
                                }
                            });
                        }
                        if(isFlag){
                            //判断是否为草稿为草稿则需对比是否内容有变化
                            if(_this.isDeldart){
                                console.log('草稿');

                                api.getPrefs({
                                    key: 'security_add_draft'
                                }, function(ret, err){
                                    if( ret ){
                                        if(ret.value){
                                            var data = $api.strToJson(ret.value);
                                            var isSate = _this.areaId == data.areaId &&
                                                        _this.areaName == data.areaName &&
                                                        _this.questionType == data.questionType &&
                                                        _this.personliableId == data.personliableId &&
                                                        _this.personliableName == data.personliableName &&
                                                        _this.laborTeamId == data.laborTeamId &&
                                                        _this.laborTeamName == data.laborTeamName &&
                                                        _this.deadline == data.deadline &&
                                                        _this.content == data.content &&
                                                        _this.questionDetails == data.questionDetails &&
                                                        _this.zgMeasures == data.zgMeasures &&
                                                        _this.isFlow == data.isFlow;
                                            console.log(isSate);

                                            isSate ? api.closeWin() : confirmFn();

                                        }else{
                                            confirmFn()
                                        }

                                    }else{
                                         alert( JSON.stringify( err ) );
                                    }
                                });

                            }else{
                                console.log('add新增');
                                confirmFn()
                            }

                        }else{
                            api.closeWin();
                        }


                    },

                    // //图片查看
                    imgSee: function(url, index) {
                        var photoBrowser = api.require('photoBrowser');
                        photoBrowser.open({
                            images: url,
                            activeIndex: index,
                            // placeholderImg: 'widget://res/img/apicloud.png',
                            bgColor: '#000'
                        }, function(ret, err) {
                            if (ret) {
                                if (ret.eventType === 'click') {
                                    photoBrowser.close();
                                }
                            } else {}
                        });
                    },


                    //删除图片
                    removeImage: function(index) {
                        this.imgSrc.splice(index, 1)
                    },
                    //图片处理
                    imgFilter: function(fncFN) {
                        if (vm.serverImg) {
                            var src_join = this.serverImg.map(function(item) {
                                return item.srcPath
                            })
                            var compress_join = this.serverImg.map(function(item) {
                                return item.compressPath
                            })
                            vm.srcImgUrl = src_join.join(',');
                            vm.compressImgUrl = compress_join.join(',');
                            fncFN()
                        }
                    },
                    //图片上传服务器保存
                    saveImg: function(fncFN) {
                        var _this = this;
                        var compressImg = [];
                        if (vm.imgSrc.length) {
                            var imageFilter = api.require('imageFilter');
                            for (var i = 0; i < vm.imgSrc.length; i++) {
                                (function(index) {
                                    var imageName = randomWord(false, 9, 12);
                                    var imageCachePath = api.cacheDir;
                                    imageFilter.compress({
                                        img: vm.imgSrc[index],
                                        quality: 0.3,
                                        save: {
                                            // album: true, //(可选项)布尔值，是否保存到系统相册，默认false
                                            imgPath: imageCachePath,
                                            imgName: imageName + '.jpg'
                                        }
                                    }, function(ret, err) {
                                        if (ret) {
                                            var txt = imageCachePath + '/' + imageName + '.jpg';
                                            compressImg.push(txt)
                                        } else {

                                        }
                                    });
                                })(i);
                            }
                            var timer = setInterval(function() {
                                if (compressImg.length == _this.imgSrc.length) {
                                    clearInterval(timer)
                                    setTimeout(function(){
                                        api.showProgress({
                                            style: 'default',
                                            animationType: 'fade',
                                            title: '努力加载中...',
                                            text: '先喝杯茶...',
                                            modal: true
                                        });
                                    },500)
                                    ajaxFile(
                                        false,
                                        '图片上传中...',
                                        uplodeEnterpriseFileURL, {
                                            enterpriseId: $api.getStorage('enterpriseId')
                                        }, {
                                            imgFile: compressImg
                                        },
                                        function(ret) {
                                            vm.isCloseBtn = false;
                                            var data = ret.obj;
                                            vm.serverImg = data;
                                            vm.imgFilter(fncFN)

                                        }
                                    )
                                }
                            }, 1000)

                        } else {
                            fncFN()
                        }
                    },

                    // // 图片选择
                    uploadHeadPic: function() {
                        confirmPer('camera,photos', function() {})
                        var i = 0;
                        var imgarr = [];
                        UIAlbumBrowser_imagePicker();
                        //打开图片选择器
                        function UIAlbumBrowser_imagePicker() {
                            UIAlbumBrowser.imagePicker({
                                max: 3 - vm.imgSrc.length,
                                styles: {
                                    bg: '#000000',
                                    //cameraImg: 'widget://res/cameraImg.png',
                                    mark: {
                                        position: 'top_right',
                                        size: 20
                                    },
                                    nav: {
                                        bg: '#000000',
                                        cancelColor: '#fff',
                                        cancelSize: 16,
                                        nextStepColor: '#7fff00',
                                        nextStepSize: 16
                                    },
                                    thumbnail: { //（可选项）返回的缩略图配置，**建议本图片不要设置过大** 若已有缩略图，则使用已有的缩略图。若要重新生成缩略图，可先调用清除缓存接口api.clearCache()。
                                        w: 52, //（可选项）数字类型；返回的缩略图的宽；默认：原图的宽度
                                        h: 52 //（可选项）数字类型；返回的缩略图的宽；默认：原图的高度
                                    }
                                },
                                animation: true,
                            }, function(ret) {
                                if (ret.eventType == 'nextStep') {
                                    if (ret.list && ret.list.length > 0) {
                                        imgarr = ret.list;
                                        UIAlbumBrowser_transPath();
                                    }
                                    UIAlbumBrowser.closePicker();
                                }
                                if (ret.originalPath && ret.originalPath.length > 0) {
                                    vm.imgSrc.push(ret.originalPath)
                                }
                            });
                        }

                        function UIAlbumBrowser_transPath() {
                            UIAlbumBrowser.transPath({
                                path: imgarr[i].path
                            }, function(ret, err) {
                                if (ret) {
                                    i++;
                                    if (i < imgarr.length) {
                                        UIAlbumBrowser_transPath();
                                    } else {
                                        i = 0;
                                    }
                                    vm.imgSrc.push(ret.path)
                                } else {
                                }
                            });
                        }
                    },
                    submitFn: function() {
                        var _this = this;
                        if(!this.imgSrc.length){
                            api.toast({
                                msg: "图片必填项",
                                duration: 2000,
                                location: 'bottom'
                            });
                            return false;
                        }
                        if(!this.areaName || !this.questionDetails || !this.personliableName || !this.laborTeamName || !this.deadline){
                            api.toast({
                                msg: "带 '*' 为必填项",
                                duration: 2000,
                                location: 'bottom'
                            });
                            return false;

                        }
                        function fnc(){
                            var params = {
                                "areaId": vm.areaId,//区域id
                                "areaName": vm.areaName,//区域名称
                                "questionType": vm.questionType,//问题类型(更改:只需要传第一级问题类型id)
                                "personliableId": vm.personliableId,//责任人ID
                                "personliableName": vm.personliableName,//责任人名称

                                "laborTeamId": vm.laborTeamId,//劳务队ID
                                "laborTeamName": vm.laborTeamName,//劳务队名称


                                "deadline": vm.deadline,//整改到期日期
                                "createUserId": vm.createUserId,//创建人ID
                                "createUserName": vm.createUserName,//创建人名称
                                "projectId": vm.projectId,//项目ID
                                "lableUrl": "",//标注图片地址(更改：该字段已清除)

                                "srcImgUrl": vm.srcImgUrl,//原图片地址（多张逗号分隔）
                                "compressImgUrl": vm.compressImgUrl,//压缩图片地址（多张逗号分隔）
                                "voiceUrl": vm.voiceUrl,//语音文件地址
                                "content":vm.content,//问题描述
                                "questionDetails": vm.questionDetails,//问题类型名称(更改：只需要传第一级)
                                "voiceLong": vm.voiceLong,//语音时长
                                "zgMeasures":vm.zgMeasures,//整改措施
                                "zgVoice": vm.zgVoice,//整改语音文件路径
                                "zgVoiceLong": vm.zgVoiceLong,//整改措施语音时长
                                "isFlow": vm.isFlow == 1 ? '1' :'0'//是否进入流程(更改的)（1进入流程 0不进入）
                            }
                            $app.post(
                                false,
                                securityaddsubmit,
                                params,
                                function(ret){
                                    api.toast({
                                        msg: ret.msg,
                                        duration: 2000,
                                        location: 'bottom'
                                    });
                                    if(_this.isDeldart){
                                        _this.del_draft()
                                    }
                                    //触发列表刷新
                                    api.sendEvent({
                                        name: 'enterpriseIndexList',
                                        extra: {
                                        }
                                    });
                                    //触发首页刷新
                                    api.sendEvent({
                                        name: 'refsh_security_list_event',
                                        extra: {
                                        }
                                    });

                                    setTimeout(function(){
                                        api.hideProgress();
                                        api.closeWin();
                                    },100)

                                }
                            )
                        }
                        this.saveImg(fnc)
                    },

                }
            })
            //

        };

    </script>
</body>

</html>
